name: gitcthulu build deploy

on: push

jobs:
  libgit2-setup-test:
    name: Setup Libgit2 with Homebrew
    runs-on: ubuntu-latest
    steps:
      - name: Install libssh2 and libgit2
        run: |
          brew install libssh2
          brew install libgit2

  gitcthulu-test:
    needs: libgit2-setup-test
    name: gitcthulu server test
    runs-on: ubuntu-latest
    env:
      PKG_CONFIG_PATH: /home/linuxbrew/.linuxbrew/Cellar/libgit2/1.1.0/lib/pkgconfig/

    steps:
      - name: Install libgit2 from Homebrew
        run: |
          brew install libssh2
          brew install libgit2

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Run Go Test
        run: |
          sudo cp /home/linuxbrew/.linuxbrew/Cellar/libgit2/1.1.0/lib/lib* /usr/lib
          export PATH="/home/linuxbrew/.linuxbrew/Cellar/libgit2/1.1.0/lib/:$PATH"
          git config --global user.name "${{ secrets.USER_NAME }}" && git config --global user.email "${{ secrets.USER_EMAIL }}"
          export GOTESTENV=ci && go test -v ./...

  # Build for Ubuntu Linux
  build-linux:
    name: Build gitcthulu for linux
    needs: gitcthulu-test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Setup libgit2
        run: |
          wget https://github.com/libgit2/libgit2/releases/download/v1.1.0/libgit2-1.1.0.tar.gz
          tar -xzf libgit2-1.1.0.tar.gz
          cd libgit2-1.1.0
          mkdir build && cd ./build
          sudo apt-get install libssl-dev
          cmake ..
          cmake --build .
          sudo make install
          sudo /sbin/ldconfig -v

      - name: Get dependencies
        run: |
          go get gotest.tools/gotestsum
          go get -v ./...

      - name: Clone test repo
        run: |
          mkdir -p /home/runner/work/gitcthulu/starfleet/
          git clone https://github.com/neel1996/starfleet.git /home/runner/work/gitcthulu-server/starfleet/

      - name: Overwrite mock test file
        run: |
          echo "# gitcthulu GoLang project" > /home/runner/work/gitcthulu/gitcthulu/README.md

      - name: Package gitcthulu bundle
        run: |
          make build
          cd dist 
          tar -czf gitcthulu-linux-amd64-v${{ secrets.TARGET_RELEASE_CHANNEL }}.tar.gz *
          ls -ltr
          cd ..

      - name: Github CLI release for Linux
        run: |
          gh version
          echo ${{ secrets.CLI_AUTH_KEY }} > auth.txt 
          gh auth login --with-token < auth.txt
          gh release upload --repo ${{ secrets.USER_NAME }}/gitcthulu ${{ secrets.TARGET_RELEASE_CHANNEL }} ./dist/gitcthulu-linux-amd64-v${{ secrets.TARGET_RELEASE_CHANNEL }}.tar.gz --clobber

  # Build for MacOS
  build-macos:
    name: Build gitcthulu for MacOS
    needs: gitcthulu-test
    runs-on: macos-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          brew install libssh2
          brew install libgit2
          go get -v ./...

      - name: Package gitcthulu bundle
        run: |
          make build
          cd dist 
          tar -czf gitcthulu-macos-amd64-v${{ secrets.TARGET_RELEASE_CHANNEL }}.tar.gz *

      - name: Github CLI Release for MacOS
        run: |
          echo ${{ secrets.CLI_AUTH_KEY }} > auth.txt
          gh auth login --with-token < auth.txt
          gh release upload ${{ secrets.TARGET_RELEASE_CHANNEL }} ./dist/gitcthulu-macos-amd64-v${{ secrets.TARGET_RELEASE_CHANNEL }}.tar.gz --clobber

  # Test Build for Windows
  build-windows:
    name: Build gitcthulu for Windows
    needs: gitcthulu-test
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Add choco packages
        run: |
          choco install wget

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16
        id: go

      - name: Build libgit2 and gitcthulu
        run: |
          unzip -q ./lib/win/dep_libs.zip
          wget -q https://github.com/libgit2/libgit2/releases/download/v1.1.0/libgit2-1.1.0.zip
          unzip -q libgit2-1.1.0.zip
          cd libgit2-1.1.0
          cp -rp ../lib/ .
          git clone https://github.com/libssh2/libssh2 libssh2
          mkdir build && mkdir install && cd build
          cmake -DPKG_CONFIG_EXECUTABLE=C:\\msys64\\usr\\bin\\pkg-config.exe -DCMAKE_INSTALL_PREFIX=../install -DOPENSSL_ROOT_DIR=../lib/win/ -DBUILD_CLAR=OFF -DEMBED_SSH_PATH=../libssh2 ..
          cmake --build . --target install
          cd ../install
          cp ./bin/git2.dll /c/msys64/usr/bin
          cp ./lib/git2.lib /c/msys64/usr/lib
          cp ./lib/pkgconfig/libgit2.pc /c/msys64/usr/lib/pkgconfig
          cp -r ./include/* /c/msys64/usr/include
          cd ../..
          rm C:\\Strawberry\\perl\\bin\\pkg-config.bat
          export PATH="/c/msys64/:/c/msys64/usr/:/c/msys64/usr/bin:$PATH" 
          go get -v ./...
          ./make.bat build

      - name: Archive ZIP bundle for windows
        run: |
          cd dist 
          cp -rp ../etc .
          7z a -r -tzip gitcthulu-windows-v${{ secrets.TARGET_RELEASE_CHANNEL }}.zip *
          ls -ltr

      - name: Github CLI Release for windows
        run: |
          echo ${{ secrets.CLI_AUTH_KEY }} > auth.txt
          gh auth login --with-token < auth.txt
          gh release upload ${{ secrets.TARGET_RELEASE_CHANNEL }} ./dist/gitcthulu-windows-v${{ secrets.TARGET_RELEASE_CHANNEL }}.zip --clobber

  # Build for Homebrew
  build-for-homebrew:
    name: Build gitcthulu Homebrew Tap bundle
    needs: gitcthulu-test
    runs-on: macos-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          brew install libssh2
          brew install libgit2
          go get -v ./...

      - name: Package gitcthulu bundle
        run: |
          make build
          rm ./dist/gitcthulu

      - name: Pick only required content for the Homebrew Tap
        run: |
          mkdir brew
          cp -rp api git global graph tests utils go.mod go.sum gqlgen.yml LICENSE server.go dist ./brew/
          cd brew 
          tar -czf gitcthulu-v${{ secrets.TARGET_RELEASE_CHANNEL }}-brew.tar.gz *

      - name: Github CLI Release for MacOS
        run: |
          echo ${{ secrets.CLI_AUTH_KEY }} > auth.txt
          gh auth login --with-token < auth.txt
          gh release upload ${{ secrets.TARGET_RELEASE_CHANNEL }} ./brew/gitcthulu-v${{ secrets.TARGET_RELEASE_CHANNEL }}-brew.tar.gz --clobber
